---
title: "面试准备"
layout: post
date: 2019-09-09 16:00
headerImage: false
tag:
- interview
- prepare
category: blog
hidden: true
author: circle
description: prepare interview
---

# 操作系统

## 进程和线程的概念

进程是具有独立功能的程序关于某个数据集合上的一次运行活动，是系统进行资源分配和调度的独立单位

linux 与进程有关的命令：
- ps -a 列出所有运行中的主进程
- ps -ef 列出所有运行中的进程，包括子进程
- pstree 以可视化的方式显示进程
- top 监控进程的资源调度，实时显示进程的状态信息，包括 PID、进程属主、优先级、CPU、memory
- nice 设置进程的优先级：nice --数字 进程名
- renice 设置正在运行的进程优先级：renice -n 优先级数字 -p 进程 pid
- kill 杀死一个进程
- kill -9 立即杀死进程
- killall -9 立即杀死具有同样名字的进程
- pgrep -u 用户 进程名 通过名字检索输出该用户的进程
- jobs 列出所有后台进程

线程是进程派生出的，是进程的一个运行实体，是 CPU 的调度单位，可以理解为轻量级进程

如何查看某个进程下的线程

- ps -T -p <pid> 显示所有进程号为 <pid> 的进程创建的所有线程
- top -H -p <pid> 输出某个进程 <pid> 并检查该进程内核运行的线程状况

## 什么是上下文切换

就是把前一个任务的 CPU 上下文（也就是 CPU 寄存器和程序计数器）保存起来，然后加载新任务的上下文到寄存器和程序计数器，最后再跳转到程序计数器所指的新位置，运行新任务。而这些保存下来的上下文，会存储在系统内核中，并在任务调度时再次加载进来。

## 多线程和多进程各自的优势

多进程优点

- 每个进程互相独立，不影响主进程的稳定性，子进程崩溃没关系
- 通过增加 CPU，就可以容易扩充性能
- 可以尽量减少线程加锁/解锁的影响，极大提高性能，就算是线程运行模块算法效率低下也没关系
- 每个子进程都有 2 GB 地址空间和相关资源，总体能够达到的性能上限非常大

多进程缺点

- 逻辑控制复杂，需要和主程序交互
- 需要跨进程边界，如果有大数据量传送，就不太好，适合小数据量传送，密集运算
- 多进程调度开销比较大

多线程优点

- 无需跨进程边界
- 程序逻辑和控制方式简单
- 所有线程可以直接共享内存和变量等
- 线程方式消耗的总资源比进程方式好

多线程缺点

- 每个线程与主程序共享地址空间，受限于 2 GB 地址空间
- 线程之间的同步和加锁控制比较麻烦
- 一个线程的崩溃可能影响到整个程序的稳定性
- 达到一定的线程数后，就算再增加 CPU 也无法提高性能
- 线程能够提高的总性能有限，而且线程多了以后，线程本身的调度需要消耗较多 CPU

## 进程间通信的方式

[以 PHP 为例][2]

- 管道通信 PIPE：首先创建一个管道，然后子进程向管道中写入信息、父进程从管道中读取信息
- 消息队列
- 信号量与共享内存

## 进程基本状态

就绪、执行、阻塞

## 抢占式调度和非抢占式调度

## 进程线程同步，死锁

## 理解协程

---

## 参考

[如何"有计划，高效率，优简历"应对面试][1]

---

[1]: https://learnku.com/articles/27430
[2]: https://segmentfault.com/a/1190000010936602
